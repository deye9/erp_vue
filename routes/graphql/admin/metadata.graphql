extend type Query {
    me: User @auth
    metadatas: [Metadata!]! @paginate(type: "paginator" model: "App\\Models\\Metadata")
    registration(id: ID @eq key: String @eq): Metadata @find(model: "App\\Models\\Metadata")
    branches(id: ID @eq key: String @eq): Metadata @field(resolver: "App\\Http\\GraphQL\\Queries\\MetadataQuery@fixKey")
}

extend type Mutation {
    updateMetadata (input: UpdateMetadataInput!): Metadata @update(flatten: true model: "App\\Models\\Metadata")
    deleteMetadata (input: DeleteMetadataInput!): Metadata @delete(flatten: true model: "App\\Models\\Metadata")
    createMetadata (input: CreateMetadataInput!): Metadata @field(flatten: true resolver: "App\\Http\\GraphQL\\Mutations\\MetadatatMutator@create")
}

# // @create(flatten: true model: "App\\Models\\Metadata")
type Metadata {
    id: ID
    key: String!
    value: String!
    created_at: DateTime!
    updated_at: DateTime
}

input CreateMetadataInput
{
    key: String @rules(apply: ["required"])
    value: String @rules(apply: ["required"])
}

input UpdateMetadataInput
{
    id: ID! @rules(apply: ["required"])
    key: String
    value: String
}

input DeleteMetadataInput {
    id: ID! @rules(apply: ["required"])
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}
