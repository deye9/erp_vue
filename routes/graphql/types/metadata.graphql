extend type Query {
    me: User @auth
    metadata(id: ID @eq): Metadata @find(model: "App\\Models\\Metadata")
    metadatas: [Metadata!]! @paginate(type: "paginator" model: "App\\Models\\Metadata")
}

type Mutation {
    createMetadata (
        key: String @rules(apply: ["required"])
        value: String @rules(apply: ["required"])
    ): Metadata @create(model: "App\\Models\\Metadata")

}

type Metadata {
    id: ID!
    key: String!
    value: String!
    created_at: DateTime!
    updated_at: DateTime!
}


# extend type Query {
#     users: [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
#     user(id: ID @eq): User @find(model: "App\\Models\\User")
# }

# type Mutation {
#     createUser(
#         name: String @rules(apply: ["required"])
#         email: String @rules(apply: ["required", "email", "unique:users,email"])
#     ): User @create(model: "App\\Models\\User")
#     updateUser(
#         id: ID @rules(apply: ["required"])
#         name: String
#         email: String @rules(apply: ["email"])
#     ): User @update(model: "App\\Models\\User")
#     deleteUser(
#         id: ID @rules(apply: ["required"])
#     ): User @delete(model: "App\\Models\\User")
# }

# type User {
#     id: ID!
#     name: String!
#     email: String!
#     created_at: DateTime!
#     updated_at: DateTime!
# }
